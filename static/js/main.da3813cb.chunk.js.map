{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAwBeA,MAnBf,YAA0D,EAA1CC,GAA2C,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC9C,OAAO,sBAAKC,UAAU,QAAf,UACH,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SAA+BD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OAAkB,oBAAIL,UAAU,gBAAd,SAA2CI,GAARC,QAC/F,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,gBCsDGC,G,wDAjDX,aAAe,IAAD,8BACV,gBAMJC,MAAQ,CACJC,WAAW,EACXC,OAAQ,IATE,EAedC,UAfc,sBAeF,8BAAAC,EAAA,sEAW6BC,IAAMC,IAAI,6CAXvC,gBAWWJ,EAXX,EAWDK,KAAMA,KAAML,OACnB,EAAKM,SAAS,CAACN,SAAQD,WAAW,IAZ1B,2CAfE,E,qDA6Bd,WACIQ,KAAKN,c,oBAGT,WAAS,MACyBM,KAAKT,MAA3BC,EADH,EACGA,UAAWC,EADd,EACcA,OACnB,OACA,yBAASV,UAAU,YAAnB,SACKS,EACE,qBAAKT,UAAU,SAAf,SAAwB,sBAAMA,UAAU,eAAhB,0BACxB,qBAAKA,UAAU,SAAf,SACEU,EAAOP,KAAI,SAAAe,GAAK,OACjB,cAAC,EAAD,CAAsBxB,GAAIwB,EAAMxB,GAAIC,KAAMuB,EAAMvB,KAAMC,MAAOsB,EAAMtB,MAAOE,OAAQoB,EAAMC,mBAAoBtB,QAASqB,EAAMrB,QAASE,OAAQmB,EAAMnB,QAAtImB,EAAMxB,e,GArDhB0B,IAAMC,YCGxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.da3813cb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Movie.css'\n\n//state가 필요없는 경우에는 class component가 될 필요가 없고 function component로 충분\nfunction Movie({id, year, title, summary, poster, genres}){\n    return <div className=\"movie\">\n        <img src={poster} alt={title} title={title}/>\n        <div className=\"movie__data\">\n            <h3 className=\"movie__title\">{title}</h3>\n            <h5 className=\"movie__year\">{year}</h5>\n            <ul className=\"movie__genres\">{genres.map((genre, index) => <li className=\"genres__genre\" key={index}>{genre}</li> )}</ul>\n            <p className=\"movie__summary\">{summary.slice(0, 150)}...</p>\n        </div>\n    </div>\n}\nMovie.propTypes = {\n    id: PropTypes.number.isRequired,\n    year: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    summary: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,//medium_cover_image\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired,\n}\nexport default Movie;","import React from 'react';\nimport axios from 'axios';\nimport Movie from './Movie';\nimport './App.css'\n\nclass App extends React.Component{\n    /*\n    Life Cycle : component의 대부분을 컨트롤할 수 있음\n    - Mounting\n    1) 먼저 호출되는 fucntion은 constructor()\n    2) 그리고 나서 render()\n    3) 그리고 나서 componentDidMount()\n    - Updating\n    >> 내가 변경하는 것들\n    - UnMounting\n    >> component가 죽을 때 (ex. 다른 페이지로 이동 등)\n     */\n    constructor() {\n        super();\n    }\n    /*\n    state : 보통 동적 데이터와 함께 작업할 때 만들어짐, 즉 변하는 데이터 or 존재하지 않는 데이터 => 이런 것은 props가 돕지 못함\n    *** setState를 호출하면 react는 state를 refresh하고 또한 render function을 호출함 (virtualDOM을 통해 필요한 부분만 update)\n     */\n    state = {\n        isLoading: true,\n        movies: [] // 처음에 선언하는 것이 필수는 아님\n    }\n    /*\n     axios는 느리기 때문에 componentDidMount가 끝날때까지 시간이 걸릴 수 있다고 말해야함\n     & 우리는 그걸 기다려야하기 때문에 async - await 붙여줌 (이것이 비동기다!!)\n     */\n    getMovies = async () => {\n        // axios => fetch위에 있는 작은 layer와 같음\n        /* 참고\n         https://github.com/serranoarevalo/yts-proxy\n         https://yts.mx/api#list_movies\n         */\n\n        // const movies = await axios.get('https://yts-proxy.now.sh/list_movies.json');\n        // console.log(movies.data.data.movies);\n        // this.setState({movies:movies})\n        // es6 표현 익힐것! ㄴ> 위와 아래는 동일한 의미\n        const {data:{data:{movies}}} = await axios.get('https://yts-proxy.now.sh/list_movies.json');\n        this.setState({movies, isLoading: false});\n    }\n    componentDidMount() { // component가 mount 되자마자 호출됨\n        this.getMovies();\n    }\n\n    render() { // react는 자동적으로 class component의 render method를 실행함\n        const { isLoading, movies } = this.state;\n        return (\n        <section className=\"container\">\n            {isLoading\n            ? (<div className=\"loader\"><span className=\"loader__text\">Loading...</span></div>)\n            : (<div className=\"movies\">\n                {movies.map(movie => (\n                <Movie key={movie.id} id={movie.id} year={movie.year} title={movie.title} poster={movie.medium_cover_image} summary={movie.summary} genres={movie.genres}/>\n                ))}\n            </div>\n                )}\n        </section>);\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// react는 component와 함께 동작! 모든 것은 component!\n// component란? HTML을 반환하는 함수 like App.js - function App(){}\n// javascript 와 HTML 사이의 조합을 JSX라고 함\n// react application은 하나의 component(즉, App)만을 rendering 해야함 >> So, 모든 컴포넌트는 application 안에 들어가야\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// react > app.js component를 root 내부에 넣어줌 >> Virtual DOM\n// application 이 처음 로딩될땐 빈 HTML 로드하고 그 후에 react가 HTML을 밀어넣음 => react가 빠르게 작동하는 이유!"],"sourceRoot":""}